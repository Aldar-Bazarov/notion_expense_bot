const { getExpenseKeyboard } = require('./keyboard');
const { addCategoryIfMissing, createExpenseRecord } = require('./notion');
const {
    saveExpenseData,
    getExpenseData,
    clearSession,
    isWaitingForNewCategory,
    setWaitingForNewCategory,
} = require('./session');
const logger = require('./logger');

async function handleTextMessage(ctx) {
    logger.info('–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', {
        userId: ctx.from.id,
        username: ctx.from.username,
        text: ctx.message.text.substring(0, 100) // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
    });

    if (isWaitingForNewCategory(ctx)) {
        return handleNewCategoryInput(ctx);
    }

    if (getExpenseData(ctx)) return;

    const lines = ctx.message.text.trim().split('\n').map(line => line.trim());
    if (lines.length < 2) {
        logger.warn('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏', {
            userId: ctx.from.id,
            linesCount: lines.length
        });
        return ctx.reply(
            'üìå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n' +
            '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏\n' +
            '–¶–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 150,3 –∏–ª–∏ 150.3)\n' +
            '–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.yyyy (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n' +
            '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n\n' +
            '–ü—Ä–∏–º–µ—Ä:\n' +
            '–ö–æ—Ñ—Ç–∞ –∫—Ä–∞—Å–Ω–∞—è\n' +
            '150,3\n' +
            '21.09.2025\n' +
            '–ö—É–ø–∏–ª –Ω–∞ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–µ'
        );
    }

    const name = lines[0];
    const priceStr = lines[1];
    const price = parseFloat(priceStr.replace(',', '.'));

    if (isNaN(price)) {
        return ctx.reply('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏—Ñ—Ä—ã –∏ —Ç–æ—á–∫—É/–∑–∞–ø—è—Ç—É—é.');
    }

    let date = '';
    let comment = '';

    if (lines.length >= 3 && /^\d{1,2}\.\d{1,2}\.\d{4}$/.test(lines[2])) {
        date = lines[2];
        if (lines.length > 3) comment = lines.slice(3).join('\n');
    } else if (lines.length >= 3) {
        comment = lines.slice(2).join('\n');
    }

    saveExpenseData(ctx, { name, price, date, comment });

    const keyboard = await getExpenseKeyboard();
    await ctx.reply(
        '‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã!\n\n' +
        `üìÑ –ù–∞–∑–≤–∞–Ω–∏–µ: ${name}\n` +
        `üí∞ –¶–µ–Ω–∞: ${price} ‚ÇΩ\n` +
        `üìÖ –î–∞—Ç–∞: ${date || '—Å–µ–≥–æ–¥–Ω—è'}\n` +
        `üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment || '‚Äî'}\n\n` +
        'üëâ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
        keyboard
    );
}

async function handleCategorySelection(ctx) {
    const data = getExpenseData(ctx);
    if (!data) {
        logger.warn('–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö', {
            userId: ctx.from.id
        });
        return ctx.answerCbQuery('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.');
    }

    const category = ctx.match[1]; // cat_–ö–æ—Ñ–µ ‚Üí –ö–æ—Ñ–µ
    logger.info('–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è', {
        userId: ctx.from.id,
        category,
        expenseData: data
    });

    try {
        await addCategoryIfMissing(category);
        const result = await createExpenseRecord({ ...data, category });

        if (result.success) {
            clearSession(ctx);
            await ctx.answerCbQuery(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${category}" –≤—ã–±—Ä–∞–Ω–∞!`);
            await ctx.editMessageText(
                `‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ:\n` +
                `üìÑ *${data.name}*\n` +
                `üí∞ *${data.price} ‚ÇΩ*\n` +
                `üìÅ *${category}*\n` +
                `üìÖ ${result.date}\n` +
                `${data.comment ? `üí¨ ${data.comment}` : ''}`,
                { parse_mode: 'Markdown' }
            );
        } else {
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Notion', {
                userId: ctx.from.id,
                error: result.error
            });
            await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Notion.');
            await ctx.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.');
        }
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', {
            userId: ctx.from.id,
            category,
            error: error.message,
            stack: error.stack
        });
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
        await ctx.answerCbQuery('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é.');
        await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.');
    }
}

async function handleCreateNewCategory(ctx) {
    const data = getExpenseData(ctx);
    if (!data) {
        return ctx.answerCbQuery('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
    }

    await ctx.answerCbQuery('‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:');
    setWaitingForNewCategory(ctx);
}

async function handleCancel(ctx) {
    clearSession(ctx);
    await ctx.answerCbQuery('‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.');
    await ctx.editMessageText('üóëÔ∏è –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.');
}

async function handleNewCategoryInput(ctx) {
    if (!isWaitingForNewCategory(ctx)) return;

    const newCategory = ctx.message.text.trim();
    if (!newCategory) {
        return ctx.reply('‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
    }

    const data = getExpenseData(ctx);
    if (!data) {
        return ctx.reply('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
    }

    try {
        await addCategoryIfMissing(newCategory);
        const result = await createExpenseRecord({ ...data, category: newCategory });

        if (result.success) {
            clearSession(ctx);
            await ctx.reply(
                `‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ:\n` +
                `üìÑ *${data.name}*\n` +
                `üí∞ *${data.price} ‚ÇΩ*\n` +
                `üìÅ *${newCategory}*\n` +
                `üìÖ ${result.date}\n` +
                `${data.comment ? `üí¨ ${data.comment}` : ''}`,
                { parse_mode: 'Markdown' }
            );
        } else {
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Notion.');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

module.exports = {
    handleTextMessage,
    handleCategorySelection,
    handleCreateNewCategory,
    handleCancel,
    handleNewCategoryInput,
};